version: '2.1'

orbs: 
  win: circleci/windows@4.1.1
  node: circleci/node@5.0.2

jobs:
  node-install:
    executor:
      name: win/server-2022
      shell: bash.exe
    steps:
      - checkout
      - run:
          name: Check current version of NVM
          command: |
            nvm --version
#       - run:
#           name: Reinstall NVM (newer version)
#           command: |
#             # Existing issue with NVM-windows 1.1.7
#             # See https://github.com/npm/cli/issues/4234

#             choco uninstall nvm --confirm
#             choco uninstall nvm.portable --confirm
#             choco install nvm
#             choco install nvm.portable
#       - run:
#           name: Check current version of NVM
#           command: |
#             # confirm NVM > 1.1.7 installed
#             nvm --version          
#       - run:
#           name: Preparing Additional Environment Variables
#           command: |
#             echo export STEAMWORKS_SDK_PATH=`pwd`/steamworks-sdk >> $BASH_ENV
#             echo export PATH="/c/Program\\ Files/Git/mingw64/libexec/git-core:\$PATH" >> $BASH_ENV
      - run: |
          # perhaps yarn should be installed via NPM instead
          curl -o- -L https://yarnpkg.com/install.sh | bash
          echo 'export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> $BASH_ENV
      - run: |
          # see https://github.com/coreybutler/nvm-windows/issues/674#issuecomment-943523487
          rm C:\Program\ Files\nodejs
      - node/install:
          # install-yarn: true
          node-version: '16.15.0'
      - run: nvm use 16.15.0
      - run: |
          node --version
          npm --version
          yarn --version
      - run: yarn global add node-gyp
      - node/install-packages:
          with-cache: false
          # cache-version: win32-v2
          override-ci-command: yarn install --frozen-lockfile

          
  docker-build:
    executor: win/server-2022
    steps:
      - checkout
      - run:
          shell: bash.exe
          command: |
            docker build -t customwin -f ./.circleci/Dockerfile .
            
            docker image ls
  docker-operations:
    executor: win/server-2022
    steps:
      - checkout
      - run:
          name: check Docker
          shell: bash.exe
          command: |
            docker version
            docker image ls
            docker pull mcr.microsoft.com/windows/nanoserver:ltsc2022
            
            docker image ls
  shallow-checkout:
    executor:
      name: win/default
      size: medium
    steps:
      - run:
          name: setup SSH
          shell: bash.exe
          command: |
            # See https://circleci.com/docs/2.0/gh-bb-integration/#establishing-the-authenticity-of-an-ssh-host
            mkdir -p ~/.ssh

            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
            ' >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - "24:76:60:64:c5:69:ab:51:8a:45:45:3a:e7:a7:9c:e0"
      - run:
          shell: bash.exe
          command: |
            ssh -T git@github.com || true 
      - run:
          shell: bash.exe
          command: |
            git clone --depth 1 $env:CIRCLE_REPOSITORY_URL .
  build:
    executor:
      name: win/default
      size: medium
    steps:
      - run:
          name: Profile CPU and memory usage (background)
          background: true
          command: |
            while ($true) {
                write-host "---------CPU"
                wmic cpu get loadpercentage
                write-host "---------Memory"
                tasklist
                write-host "---------"
                start-sleep -Seconds 1
                
            }    
      - checkout
      - run: 'Write-Host ''Hello, Windows'''
      

workflows:
  my-workflow:
    jobs:
      - node-install
#       - docker-build
#       - build
#       - shallow-checkout
